#!/bin/bash

# Some parts of this script are derived from Hashicorp: modules/terraform-aws-vault/examples/vault-examples-helper/vault-examples-helper.sh

set -e # Exit on error

readonly SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
readonly SCRIPT_NAME="$(basename "$0")"

readonly MAX_RETRIES=30
readonly SLEEP_BETWEEN_RETRIES_SEC=10

function print_usage {
  echo
  echo "Usage: consul-vault-client [OPTIONS]"
  echo
  echo "Install vault and consul for a client. This script has been tested with Ubuntu 16.04 and Amazon Linux 2."
  echo
  echo "Options:"
  echo
  echo -e "  --vault-module-version\tThe github repo version for the vault module. Required."
  echo -e "  --vault-version\ttThe vault version to install. Required."
  echo -e "  --consul-module-version\ttThe github repo version for the consul module. Required."
  echo -e "  --consul-version\ttThe consul version to install. Required."
  echo -e "  --cert-file-path\tThe path to the CA certificate public key to add to the OS certificate store. Required."
  echo -e "  --build\tThe linux build ( amazonlinux2, ubuntu16, ubuntu18 ). Required."
  echo
  echo "Example:"
  echo
  echo "  ./install-consul-vault-client --vault-module-version v0.15.1  --vault-version 1.6.1 --consul-module-version v0.8.0 --consul-version 1.9.2 --build amazonlinux2 --cert-file-path /home/ec2-user/.ssh/tls/ca.crt.pem"
}

function log {
  local readonly level="$1"
  local readonly message="$2"
  local readonly timestamp=$(date +"%Y-%m-%d %H:%M:%S")
  >&2 echo -e "${timestamp} [${level}] [$SCRIPT_NAME] ${message}"
}

function log_info {
  local readonly message="$1"
  log "INFO" "$message"
}

function log_warn {
  local readonly message="$1"
  log "WARN" "$message"
}

function log_error {
  local readonly message="$1"
  log "ERROR" "$message"
}

function has_yum {
  [[ -n "$(command -v yum)" ]]
}

function has_apt_get {
  [[ -n "$(command -v apt-get)" ]]
}

function assert_not_empty {
  local -r arg_name="$1"
  local -r arg_value="$2"

  if [[ -z "$arg_value" ]]; then
    log_error "The value for '$arg_name' cannot be empty"
    print_usage
    exit 1
  fi
}

function run {
    local -r vault_module_version="$1"
    local -r vault_download_url="$2"
    local -r vault_version="$3"
    local -r install_auth_signing_script="$4"
    local -r consul_module_version="$5"
    local -r consul_download_url="$6"
    local -r consul_version="$7"
    local -r cert_file_path="$8"
    local -r build="$9"

    rm -fr /tmp/terraform-aws-vault
    git clone --branch $vault_module_version https://github.com/hashicorp/terraform-aws-vault.git /tmp/terraform-aws-vault

    if test -n "$vault_download_url"; then
        /tmp/terraform-aws-vault/modules/install-vault/install-vault --download-url $vault_download_url
    else
        /tmp/terraform-aws-vault/modules/install-vault/install-vault --version $vault_version
    fi

    if [[ "$install_auth_signing_script" == 'true' ]]; then
        # sudo cp $SCRIPTDIR/auth/sign-request.py /opt/vault/scripts/
        if [[ ! -f /tmp/terraform-aws-vault/examples/vault-consul-ami/auth/sign-request.py ]]; then
            log_error "/tmp/terraform-aws-vault/examples/vault-consul-ami/auth/sign-request.py does not exist"
            exit 1
        fi
        sudo cp /tmp/terraform-aws-vault/examples/vault-consul-ami/auth/sign-request.py /opt/vault/scripts/
    fi

    local cert_file_name="$(basename $cert_file_path)"
    if [[ "$cert_file_path" != "/tmp/$cert_file_name" ]]; then
      sudo cp -f $cert_file_path /tmp/$cert_file_name # If the file is outside the temp dir, copy it to the temp dir. This way if it was already placed there, it will be cleaned up.
    fi
    sudo mv /tmp/$cert_file_name /opt/vault/tls/ # Always move the file from the temp dir so it is not left behind.
    
    sudo chown -R vault:vault /opt/vault/tls/
    sudo chmod -R 600 /opt/vault/tls
    sudo chmod 700 /opt/vault/tls
    if ! sudo test -f "/opt/vault/tls/ca.crt.pem"; then # Check if file is missing with sudo
        log_error "/opt/vault/tls/ca.crt.pem does not exist"
        exit 1
    fi
    sudo /tmp/terraform-aws-vault/modules/update-certificate-store/update-certificate-store --cert-file-path /opt/vault/tls/ca.crt.pem

    function install_dependencies {
        log_info "Installing dependencies"

        if $(has_apt_get); then
            sudo DEBIAN_FRONTEND=noninteractive apt-get install -y git
            if [[ "$install_auth_signing_script" == 'true' ]]; then
                sudo DEBIAN_FRONTEND=noninteractive apt-get install -y python-pip
                LC_ALL=C && sudo pip install boto3
            fi
        elif $(has_yum); then
            sudo yum install -y git
            if [[ "$install_auth_signing_script" == 'true' ]]; then
                sudo yum install -y python2-pip
                LC_ALL=C && sudo pip install boto3
            fi
        else
            log_error "Could not find apt-get or yum. Cannot install dependencies on this OS."
            exit 1
        fi
    }

    rm -fr /tmp/terraform-aws-consul
    git clone --branch $consul_module_version https://github.com/hashicorp/terraform-aws-consul.git /tmp/terraform-aws-consul

    if test -n "$consul_download_url"; then
        /tmp/terraform-aws-consul/modules/install-consul/install-consul --download-url $consul_download_url
    else
        /tmp/terraform-aws-consul/modules/install-consul/install-consul --version $consul_version
    fi

    if [[ "$build" == "ubuntu16" ]] || [[ "$build" == "amazonlinux2" ]]; then
        /tmp/terraform-aws-consul/modules/install-dnsmasq/install-dnsmasq
    elif [[ "$build" == "ubuntu18" ]]; then
        /tmp/terraform-aws-consul/modules/setup-systemd-resolved/setup-systemd-resolved
    else
        log_error 'No var $build specified'
        exit 1
    fi
}

function update {
  local vault_module_version
  local vault_download_url
  local vault_version
  local install_auth_signing_script='true'
  local consul_module_version
  local consul_download_url
  local consul_version
  local cert_file_path='/tmp/ca.crt.pem'
  local build

  while [[ $# > 0 ]]; do
    local key="$1"

    case "$key" in
      --vault-module-version)
        vault_module_version="$2"
        shift
        ;;
      --vault-download-url)
        vault_download_url="$2"
        shift
        ;;
      --vault-version)
        vault_version="$2"
        shift
        ;;
      --install-auth-signing-script)
        install_auth_signing_script="$2"
        shift
        ;;
      --consul-module-version)
        consul_module_version="$2"
        shift
        ;;
      --consul-download-url)
        consul_download_url="$2"
        shift
        ;;
      --consul-version)
        consul_version="$2"
        shift
        ;;        
      --cert-file-path)
        cert_file_path="$2"
        shift
        ;;
      --build)
        build="$2"
        shift
        ;;
      --help)
        print_usage
        exit
        ;;
      *)
        log_error "Unrecognized argument: $key"
        print_usage
        exit 1
        ;;
    esac

    shift
  done

  assert_not_empty "--vault-module-version" "$vault_module_version"
  assert_not_empty "--vault-version" "$vault_version"
  assert_not_empty "--consul-module-version" "$consul_module_version"
  assert_not_empty "--consul-version" "$consul_version"
  assert_not_empty "--build" "$build"

  run \
    "$vault_module_version" \
    "$vault_download_url" \
    "$vault_version" \
    "$install_auth_signing_script" \
    "$consul_module_version" \
    "$consul_download_url" \
    "$consul_version" \
    "$cert_file_path" \
    "$build"
}

update "$@"