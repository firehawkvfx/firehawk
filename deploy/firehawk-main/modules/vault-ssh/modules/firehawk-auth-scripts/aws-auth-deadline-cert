#!/bin/bash

set -e

readonly DEFAULT_POLL_DURATION=5
readonly DEFAULT_SERVICE_INTERVAL=60

EXECDIR="$(pwd)"
SCRIPTDIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )" # The directory of this script

function print_usage {
  echo
  echo "Usage: aws-auth-deadline-cert [OPTIONS]"
  echo
  echo "Retrieves a specific payload provided by firehawk to an SQS queue.  The payload allows temporary use of a vault token to aquire a VPN cert"
  echo "You must already have AWS credentials configured for this function to work in."
  echo
  echo "Options:"
  echo
  echo -e "  --resourcetier\tThe environment to use (dev/blue/green/main)"
  echo -e "  --install-service\tInstall a service to regularly check for VPN credentials if there is no VPN tun interface established."
  echo
  echo "Example: Wait for payload in message queue."
  echo
  echo "  aws-auth-deadline-cert --resourcetier dev"
  echo
  echo "Example: Install as a service to poll for auth payload.  Service will poll 3 times every $DEFAULT_SERVICE_INTERVAL seconds. "
  echo
  echo "  aws-auth-deadline-cert --resourcetier dev --install-service"
}

function log {
  local -r level="$1"
  local -r message="$2"
  local -r timestamp=$(date +"%Y-%m-%d %H:%M:%S")
  >&2 echo -e "${timestamp} [${level}] [$SCRIPT_NAME] ${message}"
}

function log_info {
  local -r message="$1"
  log "INFO" "$message"
}

function log_warn {
  local -r message="$1"
  log "WARN" "$message"
}

function log_error {
  local -r message="$1"
  log "ERROR" "$message"
}

function error_if_empty {
  if [[ -z "$2" ]]; then
    log_error "$1"
    exit 1
  fi
  return
}

function assert_not_empty {
  local -r arg_name="$1"
  local -r arg_value="$2"

  if [[ -z "$arg_value" ]]; then
    log_error "The value for '$arg_name' cannot be empty"
    print_usage
    exit 1
  fi
}


function install_service_launchd { # see https://www.launchd.info/ for further macos examples
  local -r resourcetier="$1"
  # var=$1
  local -r service_name="com.firehawkvfx.awsauthdeadlinecert"
  local -r plist_path="$HOME/Library/LaunchAgents/com.firehawkvfx.awsauthdeadlinecert.plist"

  echo "...Ensuring service is not loaded while installing."
  output=$(launchctl list | grep "$service_name") && loaded="true" || loaded="false"
  if [[ "$loaded" == "true" ]]; then
    launchctl unload "$plist_path"
    echo "...Service unloaded."
  else
    echo "...Service was not loaded."
  fi

  echo "...Removing logs"
  rm -f $HOME/log.aws-auth-deadline-cert.stdin
  rm -f $HOME/log.aws-auth-deadline-cert.stdout
  rm -f $HOME/log.aws-auth-deadline-cert.stderr

  # process_list_result=$(launchctl list | grep \"$service_name\") && launchctl unload "$plist_path"

  sudo tee "$plist_path" > /dev/null <<EOF
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
	<dict>
		<key>Label</key>
		<string>$service_name</string>
    <key>ProgramArguments</key>
    <array>
      <string>$SCRIPTDIR/aws-auth-deadline-cert</string>
      <string>--resourcetier</string>
      <string>$resourcetier</string>
    </array>
    <key>RunAtLoad</key>
    <true/>
    <key>StartInterval</key>
    <integer>$DEFAULT_SERVICE_INTERVAL</integer>
    <key>WorkingDirectory</key>
    <string>$SCRIPTDIR</string>
    <key>StandardInPath</key>
    <string>$HOME/log.aws-auth-deadline-cert.stdin</string>
    <key>StandardOutPath</key>
    <string>$HOME/log.aws-auth-deadline-cert.stdout</string>
    <key>StandardErrorPath</key>
    <string>$HOME/log.aws-auth-deadline-cert.stderr</string>
    <key>EnvironmentVariables</key>
    <dict>
      <key>PATH</key>
      <string>/bin:/usr/bin:/usr/local/bin</string>
    </dict>
	</dict>
</plist>
EOF

		# <key>KeepAlive</key>
		# <true/>
		# <key>ThrottleInterval</key>
		# <integer>$DEFAULT_SERVICE_INTERVAL</integer>

  echo
  echo "...Starting and enabling service on boot"
  echo
  launchctl load $HOME/Library/LaunchAgents/com.firehawkvfx.awsauthdeadlinecert.plist
  launchctl start $HOME/Library/LaunchAgents/com.firehawkvfx.awsauthdeadlinecert.plist

  echo ""
  echo "Provided you have run init-aws-auth-ssh and have SSH certificates configured,"
  echo "You can enable on boot with:"
  echo "launchctl load $HOME/Library/LaunchAgents/com.firehawkvfx.awsauthdeadlinecert.plist"
  echo ""
  echo "You can start the service after loading it with:"
  echo "launchctl start $HOME/Library/LaunchAgents/com.firehawkvfx.awsauthdeadlinecert.plist"
  # echo ""
  # echo "You can view the service logs with:"
  # echo "sudo journalctl -S today -u awsauthdeadlinecert"
  # echo ""
  # echo "Or follow live output with:"
  # echo "sudo journalctl -f -u awsauthdeadlinecert"
}

function install_service_systemd { # see https://opensource.com/article/20/7/systemd-timers for further examples
  local -r resourcetier="$1"
  var=$1
  sudo tee "/etc/systemd/system/awsauthdeadlinecert.service" > /dev/null <<EOF
[Unit]
Description=Service: Ensure Deadline client cert is current (Firehawk: Utilises AWS CLI user credentials)
Wants=awsauthdeadlinecert.timer

[Service]
Type=oneshot
User=$USER
Group=$USER
ExecStart=$SCRIPTDIR/aws-auth-deadline-cert --resourcetier $resourcetier

[Install]
WantedBy=multi-user.target
EOF

  sudo tee "/etc/systemd/system/awsauthdeadlinecert.timer" > /dev/null <<EOF
[Unit]
Description=Regular timer to handle Cert changes - Automates dynamic credentials.
Requires=awsauthdeadlinecert.service

[Timer]
Unit=awsauthdeadlinecert.service
OnUnitActiveSec=$DEFAULT_SERVICE_INTERVAL

[Install]
WantedBy=timers.target
EOF

  echo
  echo "...Starting and enabling service on boot"
  echo
  echo "Provided you have run init-aws-auth-ssh and have SSH certificates configured, start the service with:"
  echo "sudo systemctl start awsauthdeadlinecert"
  echo "You can enable on boot with:"
  echo "sudo systemctl enable awsauthdeadlinecert"
  echo
  echo "You can view the service logs with:"
  echo "sudo journalctl -S today -u awsauthdeadlinecert"
  echo
  echo "Or follow live output with:"
  echo "sudo journalctl -f -u awsauthdeadlinecert"

  sudo systemctl start awsauthdeadlinecert
  sudo systemctl enable awsauthdeadlinecert
  echo "...Running 'systemctl daemon-reload'"
  sudo systemctl daemon-reload

}

function ssm_get_parm {
  local -r parm_name="$1"
  log "...Get ssm parameter"
  output=$(aws ssm get-parameters --with-decryption --names ${parm_name}) && exit_status=0 || exit_status=$?

  invalid=$(echo ${output} | jq -r .'InvalidParameters | length')
  if [[ $exit_status -eq 0 && $invalid -eq 0 ]]; then
      log "Result: ${output}"
      value=$(echo ${output} | jq -r '.Parameters[0].Value')
      echo "$value"
      return
  fi
  log "...Failed retrieving: ${parm_name}"
  log "Result: ${output}"
  exit 1
}

function get_cert_from_vault_local {
  local -r resourcetier="$1"
  local -r vault_token="$4"

  log "Request the deadline client certifcate with localhost."
  source_file_path="/opt/Thinkbox/certs/Deadline10RemoteClient.pfx" # the original file path that was stored in vault
  source_vault_path="$resourcetier/data/deadline/client_cert_files$source_file_path" # the full namespace / path to the file in vault.
  tmp_target_path="$HOME/.ssh/_$(basename $source_file_path)"
  target_path="$HOME/.ssh/$(basename $source_file_path)"

  rm -f $tmp_target_path
  $SCRIPTDIR/get-vault-file --local --source-vault-path $source_vault_path --target-path $tmp_target_path --vault-token $vault_token
  mv $tmp_target_path $target_path 
}

function get_cert_from_vault_proxy {
  local -r resourcetier="$1"
  local -r host1="$2"
  local -r host2="$3"
  local -r vault_token="$4"

  log "Request the deadline client certificate from proxy."
  source_file_path="/opt/Thinkbox/certs/Deadline10RemoteClient.pfx" # the original file path that was stored in vault
  source_vault_path="$resourcetier/data/deadline/client_cert_files$source_file_path" # the full namespace / path to the file in vault.
  tmp_target_path="$HOME/.ssh/_$(basename $source_file_path)"
  target_path="$HOME/.ssh/$(basename $source_file_path)"

  rm -f $tmp_target_path
  $SCRIPTDIR/get-vault-file --host1 $host1 --host2 $host2 --source-vault-path $source_vault_path --target-path $tmp_target_path --vault-token $vault_token
  mv $tmp_target_path $target_path 
}

function poll_sqs_queue {
  local -r resourcetier="$1"
  local -r parm_name="/firehawk/resourcetier/$resourcetier/sqs_remote_in_deadline_cert_url"
  local -r sqs_queue_url="$(ssm_get_parm "$parm_name")"
  local -r drain_queue="false"

  log "...Polling SQS queue"

  local -r max_count=3 # set to 1 or larger to limit the number of retries
  
  local count=0
  local poll="true"

  while [[ "$poll" == "true" ]]; do # the funciton will poll the message queue until a message is received, or count is reached.
    ((count+=1))
    local msg="$(aws sqs receive-message --queue-url $sqs_queue_url)"
    if [[ ! -z "$msg" ]]; then
      poll="false"
      # log "recieved msg: $msg" # TODO remove this, contains temporary sensitive data in log
      if [[ "$drain_queue" == true ]]; then
        local reciept_handle="$(echo "$msg" | jq -r '.Messages[] | .ReceiptHandle')"
        aws sqs delete-message --queue-url $sqs_queue_url --receipt-handle $reciept_handle && echo "$msg" | jq -r '.Messages[] | .Body' 
      else
        echo "$msg" | jq -r '.Messages[] | .Body'
      fi
    fi

    if [[ "$poll" == "true" ]]; then
      if [[ $max_count -gt 0 ]] && [[ $count -ge $max_count ]]; then
        poll="false"
        log "Max count reached."
      else
        log "...Waiting $DEFAULT_POLL_DURATION seconds before retry."
        sleep $DEFAULT_POLL_DURATION
      fi
    fi
  done
}

# function get_cert_fingerprint {

#   current_fingerprint="$(openssl pkcs12 -in $target_path -nodes -passin pass: |openssl x509 -noout -fingerprint)"
#   current_fingerprint=($current_fingerprint)
#   current_fingerprint=${current_fingerprint[1]}
#   current_fingerprint="$(echo $current_fingerprint | awk -F '=' '{print $2}')"
#   echo "$current_fingerprint"
# }

function test_service_up {
  local -r deadline_client_cert_fingerprint="$1"
  log "...Try to get fingerprint from local certificate"
  source_file_path="/opt/Thinkbox/certs/Deadline10RemoteClient.pfx" # the original file path that was stored in vault
  target_path="$HOME/.ssh/$(basename $source_file_path)"
  if test -f "$target_path"; then
    log "local certificate exists"
    local_fingerprint="$($SCRIPTDIR/get_cert_fingerprint.sh $target_path)"
    log "return result"
    if [[ "$deadline_client_cert_fingerprint" == "$local_fingerprint" ]]; then
      echo "service is up"
    fi
  fi
}

function install {
  local resourcetier=""
  local run_service="true"
  local install_service="false"
  
  while [[ $# > 0 ]]; do
    local key="$1"

    case "$key" in
      --resourcetier)
        resourcetier="$2"
        shift
        ;;
      --install-service)
        run_service="false"
        install_service="true"
        ;;
      --help)
        print_usage
        exit
        ;;
      *)
        log_error "Unrecognized argument: $key"
        print_usage
        exit 1
        ;;
    esac

    shift
  done

  error_if_empty "Argument resourcetier or env var TF_VAR_resourcetier not provided" "$resourcetier"

  if [[ "$install_service" == "true" ]]; then
    if [[ "$OSTYPE" == "darwin"* ]]; then # Acquire file permissions.
      install_service_launchd "$resourcetier"
    else
      install_service_systemd "$resourcetier"
    fi
  fi

  if [[ "$run_service" == "true" ]]; then
    local -r result="$(poll_sqs_queue $resourcetier)"
    log "...Get fingerprint from SQS Message"
    local -r deadline_client_cert_fingerprint=$(echo "$result" | jq -r '.deadline_client_cert_fingerprint')
    if [[ "$deadline_client_cert_fingerprint" == "null" ]]; then
      log_error "No fingerprint in message.  The invalid message should not have been sent: fingerprint: $deadline_client_cert_fingerprint"
      exit 1
    elif [[ -z "$deadline_client_cert_fingerprint" ]]; then
      log "No SQS message available to validate with yet."
      exit 0
    elif [[ ! -n "$(test_service_up $deadline_client_cert_fingerprint)" ]]; then # if fingerprints do not match, aquire the rest of the data in the message to get the certificate
      log "Deadline cert fingerprint is not current (No Match).  Will update. Fingerprint: $deadline_client_cert_fingerprint"
      log "...Getting SQS endpoint from SSM Parameter and await SQS message for VPN credentials."
      
      if [[ ! -z "$result" ]]; then
        local -r host1=$(echo "$result" | jq -r '.host1')
        local -r host2=$(echo "$result" | jq -r '.host2')
        local -r vault_token=$(echo "$result" | jq -r '.token')

        get_cert_from_vault_proxy "$resourcetier" "$host1" "$host2" "$vault_token"
      else
        log "No payload aquired."
      fi
    else
      log "Deadline certificate matches current remote certificate."
    fi
  fi

}

install "$@"