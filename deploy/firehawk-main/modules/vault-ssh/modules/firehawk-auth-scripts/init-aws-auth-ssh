#!/bin/bash

# Configure SSH from an AWS access key using an SQS queue with Vault.

set -e

EXECDIR="$(pwd)"
SCRIPTDIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )" # The directory of this script

function print_usage {
  echo
  echo "Usage: init-aws-auth [OPTIONS]"
  echo
  echo "Signs a public key with Vault for use as an SSH client, generating a public certificate in the same directory as the public key with the suffix '-cert.pub'."
  echo "A cloud host must be running sign_ssh_key to poll for the result."
  echo
  echo "Options:"
  echo
  echo -e "  --resourcetier\tThe environment to use (dev/blue/green/main)"
  echo
  echo "Example: Sign this hosts public key with Vault in a dev environment."
  echo
  echo "  init-aws-auth --resourcetier dev"
}

function log {
  local -r level="$1"
  local -r message="$2"
  local -r timestamp=$(date +"%Y-%m-%d %H:%M:%S")
  >&2 echo -e "${timestamp} [${level}] [$SCRIPT_NAME] ${message}"
}

function log_info {
  local -r message="$1"
  log "INFO" "$message"
}

function log_warn {
  local -r message="$1"
  log "WARN" "$message"
}

function log_error {
  local -r message="$1"
  log "ERROR" "$message"
}

function error_if_empty {
  if [[ -z "$2" ]]; then
    log_error "$1"
    exit 1
  fi
  return
}

function assert_not_empty {
  local -r arg_name="$1"
  local -r arg_value="$2"

  if [[ -z "$arg_value" ]]; then
    log_error "The value for '$arg_name' cannot be empty"
    print_usage
    exit 1
  fi
}

function has_yum {
  [[ -n "$(command -v yum)" ]]
}
function has_apt_get {
  [[ -n "$(command -v apt-get)" ]]
}

function install_packages {
  if $(has_apt_get); then
    sudo apt-get install -y jq
    sudo DEBIAN_FRONTEND=noninteractive apt-get -y install python3
    sudo DEBIAN_FRONTEND=noninteractive apt-get -y install python-apt
    sudo apt install -y python3-pip
    python3 -m pip install --upgrade pip
    python3 -m pip install boto3
  fi
}

function keygen {
  private_key_path="$HOME/.ssh/id_rsa"
  if test ! -f "$private_key_path"; then
      echo "Generating private / public key pair, since it did not exist yet..."
      ssh-keygen -q -b 2048 -t rsa -f "$private_key_path" -C "" -N ""
  fi
}

function install {
  local resourcetier=""
  local no_prompts="false"
  
  while [[ $# > 0 ]]; do
    local key="$1"

    case "$key" in
      --resourcetier)
        resourcetier="$2"
        shift
        ;;
      --no-prompts)
        no_prompts="true"
        ;;
      --aws-region)
        aws_region="$2"
        configure_aws="true"
        shift
        ;;
      --aws-access-key)
        aws_access_key="$2"
        configure_aws="true"
        shift
        ;;
      --aws-secret-key)
        aws_secret_key="$2"
        configure_aws="true"
        shift
        ;;
      --help)
        print_usage
        exit
        ;;
      *)
        log_error "Unrecognized argument: $key"
        print_usage
        exit 1
        ;;
    esac

    shift
  done

  error_if_empty "Argument resourcetier or env var TF_VAR_resourcetier not provided" "$resourcetier"

  echo "Install bash packages"
  install_packages
  echo "Keygen"
  keygen
  
  if [[ "$no_prompts" == "true" ]]; then
    echo "sign_pub_key_request_no_prompts"
    # sign_pub_key_request_no_prompts "$resourcetier" "$aws_region" "$aws_access_key" "$aws_secret_key"
    aws configure set default.region "$aws_region"
    aws configure set aws_access_key_id "$aws_access_key"
    aws configure set aws_secret_access_key "$aws_secret_key"
    aws sts get-caller-identity
    $SCRIPTDIR/sign-ssh-key --sqs-send --resourcetier "$resourcetier"
  else
    echo "sign_pub_key_request_with_prompts"
    echo
    echo "To aquire AWS credentials, run the following from the provisioner ec2 instance:"
    echo "sudo su - ec2-user"
    echo "cd server"
    echo "source ./update_vars.sh"
    echo "deploy/firehawk-main/modules/terraform-aws-vpn/modules/openvpn-vagrant-client/scripts/firehawk-auth-scripts/sign-ssh-key --generate-aws-key"
    echo
    $SCRIPTDIR/sign-ssh-key --aws-configure --resourcetier "$resourcetier"
  fi
}

install "$@"