#!/bin/bash
# This script aquires needed vpn client files from vault to an intermediary bastion

set -e

EXECDIR="$(pwd)"
SCRIPTDIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )" # The directory of this script

function print_usage {
  echo
  echo "Usage: get-vault-file [OPTIONS]"
  echo
  echo "This script can be used to install Vault and its dependencies. This script has been tested with Ubuntu 16.04, Ubuntu 18.04 and Amazon Linux 2."
  echo
  echo "Options:"
  echo
  echo -e "  --host1\t\tThe 'user@hostname' required to SSH to the jump box/bastion host."
  echo -e "  --host2\t\tThe 'user@hostname' required to SSH to the vault client/private host."
  echo -e "  --source-vault-path\t\tThe full vault path to the location of the file data in vault."
  echo -e "  --target-path\t\tThe final location you would like the file to reside."
  echo -e "  --vault-token\t\tThe vault token that will be utilised on the vault client to retrieve the data."
  echo
  echo "Example:"
  echo
  echo "  get-vault-file --host1 centos@ec2-3-25-143-13.ap-southeast-2.compute.amazonaws.com --host2 centos@i-0df3060971160cdd6.node.consul --source-vault-path dev/data/vpn/client_cert_files/usr/local/openvpn_as/scripts/seperate/client.ovpn --target-path ../openvpn_config/client.ovpn --vault-token 34hgkj323r2wgsg"
}

function log {
  local -r level="$1"
  local -r message="$2"
  local -r timestamp=$(date +"%Y-%m-%d %H:%M:%S")
  >&2 echo -e "${timestamp} [${level}] [$SCRIPT_NAME] ${message}"
}

function log_info {
  local -r message="$1"
  log "INFO" "$message"
}

function log_warn {
  local -r message="$1"
  log "WARN" "$message"
}

function log_error {
  local -r message="$1"
  log "ERROR" "$message"
}

function ssm_get_parm {
  local -r parm_name="$1"

  output=$(aws ssm get-parameters --names ${parm_name}) && exit_status=0 || exit_status=$?

  invalid=$(echo ${output} | jq -r .'InvalidParameters | length')
  if [[ $exit_status -eq 0 && $invalid -eq 0 ]]; then
    log "Result: ${output}"
    value=$(echo ${output} | jq -r '.Parameters[0].Value')
    echo "$value"
    return
  fi
  log "...Failed retrieving: ${parm_name}"
  log "Result: ${output}"
  exit 1
}

function assert_not_empty {
  local -r arg_name="$1"
  local -r arg_value="$2"

  if [[ -z "$arg_value" ]]; then
    log_error "The value for '$arg_name' cannot be empty"
    print_usage
    exit 1
  fi
}

function getdata {
  local version=""
  local download_url=""
  local path="$DEFAULT_INSTALL_PATH"
  local user="$DEFAULT_VAULT_USER"

  while [[ $# > 0 ]]; do
    local key="$1"
    local host1=""
    local host2=""

    case "$key" in
      --host1)
        host1="$2"
        shift
        ;;
      --host2)
        host2="$2"
        shift
        ;;
      --resourcetier)
        resourcetier="$2"
        shift
        ;;
      --target-path)
        target_path="$2"
        shift
        ;;
      --vault-token)
        VAULT_TOKEN="$2"
        shift
        ;;
      --help)
        print_usage
        exit
        ;;
      *)
        log_error "Unrecognized argument: $key"
        print_usage
        exit 1
        ;;
    esac

    shift
  done

  # assert_not_empty "--host1" "$host1"
  # assert_not_empty "--host2" "$host2"
  assert_not_empty "--resourcetier" "$resourcetier"
  assert_not_empty "--target-path" "$target_path"

  if [[ ! -z "$host1" ]] && [[ ! -z "$host2" ]]; then
    if [[ -z "$VAULT_TOKEN" ]]; then
      echo "Provide a vault token to utilise on the private vault client:"
      read -s -p "VAULT_TOKEN: " VAULT_TOKEN
    fi
    # Retrieve generated secrets from Vault.  Would be better if we can use vault as an intermediary to generate certs.
    log_info "Aquiring values from Vault"

    onsite_private_vpn_ip=$(ssh -o ProxyCommand="ssh $host1 -W %h:%p" $host2 "bash -s" < $SCRIPTDIR/request_stdout.sh "$resourcetier/data/vpn/onsite_private_vpn_ip" "$VAULT_TOKEN" | jq -r '.data.data.value')
  else
    log_info "Aquiring values from SSM Parameter Store"

    onsite_private_vpn_ip=$(ssm_get_parm /firehawk/resourcetier/${resourcetier}/onsite_private_vpn_ip)
  fi

  echo "onsite_private_vpn_ip: $onsite_private_vpn_ip"
  echo "{\"resourcetier\": \"$resourcetier\", \"$resourcetier\": {\"onsite_private_vpn_ip\" : \"$onsite_private_vpn_ip\" }}" | jq . > $target_path

  if test -f $target_path; then
    log_info "IP address aquired!"
  else
    log_info "Could not aquire data. Aborting.";
    exit 1;
  fi
}

getdata "$@"