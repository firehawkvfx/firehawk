#!/bin/bash
set -e

# - Generate a set of AWS credentials with vault on the cloud9 host:
# ```
# vault read aws/creds/aws-creds-ssm-parameters-ssh-certs
# ```

# - With the CLI installed on your onsite host, ensure you have installed the AWS CLI, and configure these credentials, along with your region:
# ```
# aws configure 
# ```
# - You will now be able to read parameters, for example:
# ```
# aws ssm get-parameters --names /firehawk/resourcetier/dev/trusted_ca
# ```
printf "\nRemote Client Auth Instructions (Required only once per Vault install):"
printf "\nGenerate a set of AWS credentials for your remote client on the cloud9 host:"
printf "\nvault read aws/creds/aws-creds-ssm-parameters-ssh-certs"
printf "\n"
printf "\nEnsure the AWS CLI is installed on your onsite host, and configure these credentials for use, along with your region:"
printf "\naws configure"
printf "\n"
printf "\nYou will now be able to read parameters, for example:"
printf "\naws ssm get-parameters --names /firehawk/resourcetier/dev/ssh_known_hosts_fragment"
printf "\n"
printf "\nFor protection against Man In The Middle attacks configure your trusted known hosts Certificate Authority and specify an expected external DNS name:"
printf "\nfirehawk/deploy/firehawk-main/modules/vault-ssh/modules/known-hosts/known_hosts.sh --ssm --external-domain ap-southeast-2.compute.amazonaws.com"
printf "\n"
printf "\nConfigure your previously signed public key with Vault (This should have been the same public key you pasted into the cloudformation template, it was signed during vault-init/configure):"
printf "\nfirehawk/deploy/firehawk-main/modules/vault-ssh/modules/sign-ssh-key/sign_ssh_key.sh  --ssm"
printf "\n"
printf "\nYou will now be able to SSH into your cloud private network using your remote host.  This will allow further automation."

cd $TF_VAR_firehawk_path/modules/terraform-aws-bastion
bastion_public_dns=$(terragrunt output public_dns)

cd $TF_VAR_firehawk_path/modules/terraform-aws-vault-client
vault_client_consul_private_dns=$(terragrunt output consul_private_dns)
printf "\n"
printf "\nSSH and remote Vault UI Instructions (Required on each deploy):"
printf "\nA private Vault client can be used to forward the Vault UI to your remote onsite web browser (address https://127.0.0.1:8200/ui) via the bastion by forwarding the web service. From your remote host, enable forwarding with:"
printf "\nssh -J centos@${bastion_public_dns} centos@${vault_client_consul_private_dns} -L 8200:vault.service.consul:8200\n"
printf "\nYou can create a shorter lived admin token to use the web UI remotely:"
printf "\nvault token create -policy=admins -explicit-max-ttl=4h"
printf "\n"
printf "\nUsing that token, login to the UI with your web browser at https://127.0.0.1:8200/ui"
printf "\n"
printf "\nVPN Instructions:"
printf "\nIn the web UI, locate the VPN password to enter this next at:"
printf "\ndev/network/openvpn_admin_pw"
printf "\n"
printf "\nStartup the VPN for your remote onsite host:"
printf "\nfirehawk/deploy/firehawk-main/modules/terraform-aws-vpn/modules/openvpn-vagrant-client/wake dev centos@${bastion_public_dns} centos@${vault_client_consul_private_dns}"
printf "\n"
printf "\nFollow the steps provided by that command to create a token to retrieve the VPN authentication certificates."
printf "\n"
printf "\n"

# - Ensure SSH forwarding is functional with the result command given to you by `./wake`:
# ```
# ssh -J centos@ec2-13-211-132-68.ap-southeast-2.compute.amazonaws.com centos@i-0330138643ba03b32.node.consul -L 8200:vault.service.consul:8200
# ```
# - From Cloud 9, create a token you can use to automatically retrieve your vpn config using the vpn_read_config_policy
# You must provide a vault token, which should based on a policy of least privilege.  This token will have a short ttl, enough time for our automation script to acquire the VPN config.  We can also define a reasonable use limit, preventing the secret from being useful once we are done with it!  in This case we need to use it twice, once to login, and another when we request the vpn config file.
# ```
# vault token create -policy=vpn_read_config -policy=deadline_client -explicit-max-ttl=5m -ttl=5m -use-limit=4
# ```

# - Run the vagrant wake script 
# ./modules/terraform-aws-vpn/modules/openvpn-vagrant-client/wake {resourcetier} {public host} {private host} 
# eg:
# ```
# ./modules/terraform-aws-vpn/modules/openvpn-vagrant-client/wake dev centos@ec2-13-211-132-68.ap-southeast-2.compute.amazonaws.com centos@i-0330138643ba03b32.node.consul
# ```

# - You can acquire the dynamic open vpn password in vault under `/dev/network/openvpn_admin_pw`