#!/usr/bin/env bash

# The contents of secrets.template are modified by update_vars.sh.
# Editing these contents should only be done in secrets/secrets-dev or secrets/secrets-prod, and then propogated with source ./update_vars.sh

# WARNING: When editing your secrets files manually do not store any secrets / sensitive information in #commented lines in these files.
# Do not store any secrets as keys in any lines
# Secrets should only ever be stored as values in uncommented lines.

# SECRETS INITIALIZATION #

# Secrets must be used as values only, since it is only the values that are kept private.
# Comments and variable names / keys are read from your private secrets/secrets-dev or secrets/secrets-prod file in your private repo to auto generate the public firehawk/secrets.template file when running 'source ./update_vars.sh'.

# If these steps are followed then no private values will be or should be propogated into the public repo firehawk/secrets.template file.
# Before making any commits to the public firehawk repo ensure there are no secrets / sensitive information contained in commits.
# Be sure to provide any new variable keys you may end up adding with a commented out description with example dummy values above your actual secret value used to assist others.

# Do not put real world sensitive information in the example comments.

# New comments should be only added in secrets-dev or secrets-prod as these lines will be propogated into the secrets.template schema used to initialise any new  secrets/secrets-dev or secrets/secrets-prod files.

# BEGIN CONFIGURATION #

# sesi_client_id:
# see https://www.sidefx.com/docs/api/download/index.html and https://www.sidefx.com/oauth2/applications/ to create a new app with client id and secret key.  This allows downloading of houdini installers.
# eg: sesi_client_id=235kj4gb235kb23rtoug2h3lfmnb2fm2n3f
sesi_client_id=insertvalue

# sesi_client_secret_key:
# see https://www.sidefx.com/docs/api/download/index.html and https://www.sidefx.com/oauth2/applications/ to create a new app with client id and secret key.  This allows downloading of houdini installers.
# eg: sesi_client_secret_key=hj23gr2kjh2ql3fjhwl3jhfgwl3jfhg34ljfh23bljfh32gfljh312ggflj3h1gfljh12g3fkuh23gfljh23blf3wblfyg3qljfg3qfljbqwlj3gfjhybq3rfjhb
sesi_client_secret_key=insertvalue

# TF_VAR_db_pass:
# The password to configure and connect with the Deadline DB.  This password will be used to set deadline db during installation.
# eg: TF_VAR_db_pass='MySuperSecretUniqueDeadlineDBPass'
TF_VAR_db_pass=insertvalue

# TF_VAR_openvpn_user_pw:
# The password for open vpn web ui login.
# Ensure the admin and user passwords are different to the example, but match each other.
# eg: TF_VAR_openvpn_user_pw=MyUniqueSecretVPNPassword
TF_VAR_openvpn_user_pw=insertvalue

# TF_VAR_openvpn_admin_pw:
# The password for open vpn web ui login.
# Ensure the admin and user passwords are different to the example, but match each other.
# eg: TF_VAR_openvpn_admin_pw=MyUniqueSecretVPNPassword
TF_VAR_openvpn_admin_pw=insertvalue

# TF_VAR_user_softnas_pw:
# The password used to login to softnas at https://{the softnas ip}
# eg: TF_VAR_user_softnas_pw=MySecretSoftnasPAssword
TF_VAR_user_softnas_pw=insertvalue

# TF_VAR_user_inituser_name:
# The user name on your local workstation to login in as the initial user that will create the deploy user.  This user must exist for installation to commence.
# If no uer exists yet in an example centos host, it can be created with 'sudo useradd -m user; sudo passwd user'.
TF_VAR_user_inituser_name=insertvalue

# TF_VAR_user_inituser_pw:
# The password on your local workstation to login in as the initial user that will create the deploy user.  This process will only be performed once, before the deploy user will be used and only remote access via ssh will be permitted after this point. Ensure this password is not the same as your root user password in any case.  This password and user must be initialised for installation to commence.
TF_VAR_user_inituser_pw=insertvalue

# TF_VAR_user_deployuser_pw:
# The password to login in as the user that will deploy the config.  note this is different to the standard user, deadlineuser, as it is used for configuration management.
TF_VAR_user_deployuser_pw=insertvalue

# TF_VAR_user_deadlineuser_pw:
# The password for the deadlineuser
# eg: TF_VAR_user_deadlineuser_pw=MyUniquePasswordForDeadlineUser
TF_VAR_user_deadlineuser_pw=insertvalue

# TF_VAR_usage_based_url:
# The URL provided by Thinkbox for your Usage Based Licencing credits.  Rendernodes on AWS get deadline free, but if you require UBL software licences for other packages or for your onsite workstations you will need to purchase credits.
# eg: TF_VAR_usage_based_url=https://thinkbox.compliance.flexnetoperations.com/instances/KJ32H45K2J3H/request
TF_VAR_usage_based_url=insertvalue

# TF_VAR_usage_based_activation_code:
# The 16 digit activation code provided by Thinkbox for your usage based licencing.
# eg: TF_VAR_usage_based_activation_code=H58H-J4N6-3H5B-J6N7
TF_VAR_usage_based_activation_code=insertvalue

# TF_VAR_deadline_proxy_certificate_password:
# The password for the TLS certificate used to connect to Deadline Remote Conetion Server. 
# eg: TF_VAR_deadline_proxy_certificate_password="MySecretProxyPassword"
TF_VAR_deadline_proxy_certificate_password=insertvalue

# TF_VAR_aws_region:
# Your AWS default region.  This should be your nearest AWS datacentre for the best latency/performance.
# default: TF_VAR_aws_region=ap-southeast-2
TF_VAR_aws_region=insertvalue

# TF_VAR_pgp_public_key:
# This is the public pgp key used to encrypt sensitive data.  This is normally your keybase user name appended to 'keybase:'
# If you have PGP configured without keybase, It can also be the location of a gpg public key on disk produced with:
# gpg --export "email@example.com" > /secrets/keys/my_key_dev.gpg.pub
# then a teraform secret can read with:
# terraform output secret | base64 -d | gpg -dq
# eg1: TF_VAR_pgp_public_key=TF_VAR_pgp_public_key=keybase:my_keybase_username
# eg2: TF_VAR_pgp_public_key=/secrets/keys/gpg_key.gpg.pub
TF_VAR_pgp_public_key=insertvalue

# TF_VAR_pgp_private_key:
# Only required if specifying a pgp key on disk instead of using keybase.  this is the private kay.
# eg1: TF_VAR_pgp_private_key=/secrets/keys/gpg_key.gpg
# eg2: TF_VAR_pgp_private_key=none
TF_VAR_pgp_private_key=insertvalue

# TF_VAR_keybase_secret:
# If using a keybase user name above: Your Keybase.io password. You will need to setup a keybase account at keybase.io for PGP decryption of AWS keys from Terraform.  Ensure you configure it on a second device like a mobile for MFA, since keybase installs in VM's will likely be erased during testing, and you will need a second device to authorise again.
# if you aren't using keybase this can be left blank
# eg: TF_VAR_keybase_secret=MyKeybaseSecretPassword
# eg: TF_VAR_keybase_secret=MyGPGpassword
TF_VAR_keybase_secret=insertvalue

# TF_VAR_pgp_secret:
# If you specified a path to gpg public key for TF_VAR_pgp_public_key, then this is the secret used for this key.
# eg: TF_VAR_pgp_secret=MySecretPGPKeyPass
# eg: TF_VAR_pgp_secret=none
TF_VAR_pgp_secret=insertvalue

# TF_VAR_pgp_email:
# the email address used to encrypt using a your own pgp key (not keybase).
# eg1: TF_VAR_pgp_email=none
# eg2: TF_VAR_pgp_email=myemail@example.com
TF_VAR_pgp_email=insertvalue

# AWS_ACCOUNT_ID_dev:
# The dev account id found on the accounts page in the aws console.
# eg: AWS_ACCOUNT_ID_dev=132513513561
AWS_ACCOUNT_ID_dev=insertvalue

# AWS_ACCESS_KEY_ID_dev:
# The access key id for your AWS user to use for provisioning with terraform.  Ideally this will not have admin root permissions in the future with the correct permissions set.  Currently we use root permissions during dev until the rollout is stable.
# eg: AWS_ACCESS_KEY_ID_dev=34JB234K5JB34K5JB
AWS_ACCESS_KEY_ID_dev=insertvalue

# AWS_SECRET_ACCESS_KEY_dev:
# The secret key for your AWS user to use for provisioning with terraform.
# eg: AWS_SECRET_ACCESS_KEY_dev=32KJB124kjb34kjb2341kjb23JBHLJ
AWS_SECRET_ACCESS_KEY_dev=insertvalue

# AWS_ACCOUNT_ID_prod:
# The prod account id found on the accounts page in the aws console.
# eg: AWS_ACCOUNT_ID_prod=46513213132
AWS_ACCOUNT_ID_prod=insertvalue

# AWS_ACCESS_KEY_ID_prod:
# The access key id for your AWS user to use for provisioning with terraform in the production environment.  We often use a seperate AWS account for dev and prod to protect the prod environment and have seperate public domains.  Ideally this will not have admin root permissions in the future with the correct permissions set.  Currently we use root permissions during developement until the rollout is stable.
# eg: AWS_ACCESS_KEY_ID_prod=34JB234K5JB34K5JB
AWS_ACCESS_KEY_ID_prod=insertvalue

# AWS_SECRET_ACCESS_KEY_prod:
# The access key id for your AWS user to use for provisioning with terraform in the production environment.  We often use a seperate AWS account for dev and prod to protect the prod environment and have seperate public domains.  Ideally this will not have admin root permissions in the future with the correct permissions set.  Currently we use root permissions during developement until the rollout is stable.
# eg: AWS_SECRET_ACCESS_KEY_prod=SH5+e5h/e5EHDGHhr5rddh
AWS_SECRET_ACCESS_KEY_prod=insertvalue

# TF_VAR_s3_disk_password:
# Softnas will use this password to encrypt s3 buckets for s3 disks.
# eg: TF_VAR_s3_disk_password=MyEncryptedS3Password
TF_VAR_s3_disk_password=insertvalue

# TF_VAR_bucket_extension_dev:
# The extension for cloud storage used to label your S3 storage buckets.  
# This can be any unique name (it must not be taken already, globally).  commonly, it is a domain name you own, or an abbreviated email adress.  No @ symbols are allowed.
# See this doc for naming restrictions on s3 buckets - https://docs.aws.amazon.com/AmazonS3/latest/dev/BucketRestrictions.html
# eg1: TF_VAR_bucket_extension_dev=dev.example.com
# eg1: TF_VAR_bucket_extension_dev=myemail-gmail-com-dev
TF_VAR_bucket_extension_dev=insertvalue

# TF_VAR_bucket_extension_prod:
# The extension for cloud storage used to label your S3 storage buckets.  MUST BE UNIQUE TO THE DEV BUCKET EXTENSION.
# This can be any unique name (it must not be taken already, globally).  commonly, it is a domain name you own, or an abbreviated email adress.  No @ symbols are allowed.
# See this doc for naming restrictions on s3 buckets - https://docs.aws.amazon.com/AmazonS3/latest/dev/BucketRestrictions.html
# eg1: TF_VAR_bucket_extension_prod=mydomain.com
# eg2: TF_VAR_bucket_extension_prod=myemail-gmail-com-prod
TF_VAR_bucket_extension_prod=insertvalue

# TF_VAR_fsx_bucket_prefix:
# The bucket prefix used for the FSx S3 storage.
# default: TF_VAR_fsx_bucket_prefix=prod
TF_VAR_fsx_bucket_prefix=insertvalue
