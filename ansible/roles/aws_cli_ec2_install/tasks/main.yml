---
#tasks file for roles/aws-cli

- name: Collect some facts only for ansible_distribution
  setup:
    gather_subset:
      - '!all'
      - 'min'
  tags:
  - always

- name: Set pip interpreter - centos.   In centos we use python2.7 but for pip we require python3. https://britishgeologicalsurvey.github.io/devops/centos7-python2-end-of-life/
  set_fact:
    pip_python_interpreter: "/usr/bin/python3"
  when: ansible_distribution == 'CentOS' or ansible_distribution == 'RedHat'

- name: Set pip interpreter - ubuntu
  set_fact:
    pip_python_interpreter: "{{ package_python_interpreter }}"
  when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'

- name: install whois, passlib
  package:
    name: "{{ item }}"
    state: present
  with_items:
    - whois
    - zip
  vars:
    ansible_python_interpreter: "{{ package_python_interpreter }}"

- name: ansible versions other than 'latest' are not supported until virtuelenv is integrated into the repo.
  fail:
    msg: "ansible version {{ ansible_version}} is other than 'latest' are not supported until virtuelenv is integrated into the repo."
  when: selected_ansible_version != 'latest'

- name: install awscli, force upgrade - root
  pip: 
    name: awscli
    extra_args: --upgrade
  vars:
    ansible_python_interpreter: "{{ pip_python_interpreter }}"
  become: true

# for some reason this can still have permissions issues on the deployuser vm when command line is fine.  this only occurs with the ansible modules
- name: install awscli, force upgrade
  pip: 
    name: awscli
    extra_args: --upgrade --user
  vars:
    ansible_python_interpreter: "{{ pip_python_interpreter }}"
  become_user: "{{ variable_become_user }}"
  become: true
  # when: selected_ansible_version == 'latest'

- name: get aws command. if this errors can can pass the path as a var to the playbook- aws_path=$(which aws)
  command: which aws
  register: command_output
  become_user: "{{ variable_become_user }}"
  when: aws_path is undefined

- set_fact:
    aws_path: "{{ command_output.stdout }}"
  when: aws_path is undefined

  # become: true

- name: show aws path
  debug:
    var: aws_path

- name: Create a symbolic link for aws to get around PATH issues in Ansible. # https://github.com/ansible/ansible/issues/71520
  file:
    src: "{{ aws_path }}"
    dest: /usr/local/sbin/aws
    owner: root
    group: root
    state: link
  become: true

- name: install pexpect
  pip: 
    name: pexpect
    extra_args: --upgrade --user
  vars:
    ansible_python_interpreter: "{{ pip_python_interpreter }}"
  become_user: "{{ variable_become_user }}"
  become: true
  # when: selected_ansible_version == 'latest'

- name: install the boto package, force upgrade
  pip: 
    name: boto3
    extra_args: --user
  vars:
    ansible_python_interpreter: "{{ pip_python_interpreter }}"
  become_user: "{{ variable_become_user }}"
  become: true
  # when: selected_ansible_version == 'latest'

# on an ec2 instance, the cli credentials are inherited automatically by the role or permissions assigned to the instance.  Below is the optional tag to intall a specific access key for a user account.  the inputs are provided as environment variables with pgp encryption.

# decrypt the secret

- name: "Keybase: Run expect to wait for a keybase pass and decrypt - first time is dirty output."
  shell: |
    /deployuser/scripts/pgp-expect-keybase.sh {{ keybase_secret | regex_escape() }} {{ storage_user_secret | regex_escape() }}
  become_user: deployuser
  connection: local
  no_log: true
  when: "'keybase:' in pgp_public_key"
  tags:
  - user_access

- name: "Keybase: Run expect to wait for a keybase pass and decrypt - collect output."
  shell: |
    /deployuser/scripts/pgp-expect-keybase.sh {{ keybase_secret | regex_escape() }} {{ storage_user_secret | regex_escape() }}
  become_user: deployuser
  connection: local
  register: storage_user_secret_output
  no_log: true
  when: "'keybase:' in pgp_public_key"
  tags:
  - user_access

- set_fact:
    storage_user_secret_key: "{{ storage_user_secret_output.stdout }}"
  no_log: true
  when: storage_user_secret_output.changed
  tags:
  - user_access

- name: "GPG: Run expect to wait for a pgp pass and decrypt - collect output."
  shell: |
    echo {{ storage_user_secret | regex_escape() }} | base64 --decode | gpg -dq --no-tty --passphrase {{ pgp_secret | regex_escape() }} --no-use-agent
  become_user: deployuser
  connection: local
  register: storage_user_secret_output
  no_log: true
  when: "'keybase:' not in pgp_public_key"
  tags:
  - user_access

# now use the outputs to install the aws cli

- set_fact:
    storage_user_secret_key: "{{ storage_user_secret_output.stdout }}"
  no_log: true
  when: storage_user_secret_output.changed
  tags:
  - user_access

- fail:
    msg: "invalid output from keybase expect"
  when: '" " in storage_user_secret_key or storage_user_secret_key ==""'
  no_log: true
  tags:
  - user_access

- name: ansible distro
  debug:
    var: ansible_distribution

# install aws cli for the user.

- name: "Use expect to install AWS CLI- Centos {{ variable_become_user }}"
  expect:
    # different version of the command may be required for centos.  depending on install method this can change.  eg:
    # /usr/bin/aws
    # /home/{{ variable_user }}/.local/bin/aws
    command: "aws configure"
    responses:
      .*Access Key ID \[.*\]: "{{ storage_user_access_key_id }}"
      .*Secret Access Key \[.*\]: "{{ storage_user_secret_key }}"
      .*region name \[.*\]: "{{ aws_region }}"
      .*output format \[.*\]: json
  become_user: "{{ variable_become_user }}"
  become: true
  no_log: true
  when: ansible_distribution == 'CentOS' or ansible_distribution == 'RedHat'
  tags:
  - user_access

- name: Use expect to install AWS CLI- Ubuntu
  expect:
    # this version of the command may be required for ubuntu
    command: "aws configure"
    responses:
      .*Access Key ID \[.*\]: "{{ storage_user_access_key_id }}"
      .*Secret Access Key \[.*\]: "{{ storage_user_secret_key }}"
      .*region name \[.*\]: "{{ aws_region }}"
      .*output format \[.*\]: json
  become_user: "{{ variable_become_user }}"
  become: true
  no_log: true
  when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'
  tags:
  - user_access

# install aws cli for root.  sometimes paths will be written to that only the root should be able to write to.  if that happens, the root user needs aws credentials to do that.

- name: Use expect to install AWS CLI- Centos - root
  expect:
    # this version of the command may be required for centos
    command: "aws configure"
    responses:
      .*Access Key ID \[.*\]: "{{ storage_user_access_key_id }}"
      .*Secret Access Key \[.*\]: "{{ storage_user_secret_key }}"
      .*region name \[.*\]: "{{ aws_region }}"
      .*output format \[.*\]: json
  become: true
  no_log: true
  when: ( ansible_distribution == 'CentOS' or ansible_distribution == 'RedHat' ) and aws_cli_root
  tags:
  - user_access

- name: Use expect to install AWS CLI- Ubuntu - root
  expect:
    # this version of the command may be required for ubuntu
    command: "aws configure"
    responses:
      .*Access Key ID \[.*\]: "{{ storage_user_access_key_id }}"
      .*Secret Access Key \[.*\]: "{{ storage_user_secret_key }}"
      .*region name \[.*\]: "{{ aws_region }}"
      .*output format \[.*\]: json
  become: true
  no_log: true
  when: ( ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu' ) and aws_cli_root
  tags:
  - user_access



# example usage:
# ansible-playbook -i ansible/inventory ansible/aws_cli_ec2_install.yaml -v --extra-vars "variable_host=role_node_centos"